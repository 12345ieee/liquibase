package liquibase.database;

import liquibase.migrator.exception.JDBCException;
import liquibase.migrator.exception.MigrationFailedException;

import java.sql.Connection;

public class DerbyDatabase extends AbstractDatabase {

    public boolean isCorrectDatabaseImplementation(Connection conn) throws JDBCException {
        return "Apache Derby".equalsIgnoreCase(getDatabaseProductName(conn));
    }

    public String getDefaultDriver(String url) {
        if (url.startsWith("jdbc:derby")) {
            return "org.apache.derby.jdbc.EmbeddedDriver";
        }
        return null;
    }

    public String getProductName() {
        return "Apache Derby";
    }

    public String getTypeName() {
        return "derby";
    }

    public String getSchemaName() throws JDBCException {//NOPMD
        return super.getSchemaName().toUpperCase();
    }

    public boolean supportsSequences() {
        return false;
    }

    public boolean supportsInitiallyDeferrableColumns() {
        return false;
    }

    protected String getBooleanType() {
        return "SMALLINT";
    }

    protected String getCurrencyType() {
        return "DECIMAL";
    }

    protected String getUUIDType() {
        return "CHAR(36)";
    }

    protected String getClobType() {
        return "CLOB";
    }

    protected String getBlobType() {
        return "BLOB";
    }

    protected String getDateTimeType() {
        return "TIMESTAMP";
    }

    public String getCurrentDateTimeFunction() {
        return "CURRENT_TIMESTAMP";
    }

    public String getFalseBooleanValue() {
        return "0";
    }

    public String getTrueBooleanValue() {
        return "1";
    }

    public String getDropTableSQL(String tableName) {
        return "DROP TABLE " + tableName;
    }

    public String getAutoIncrementClause() {
        return "GENERATED BY DEFAULT AS IDENTITY";
    }


    public String getDateLiteral(String isoDate) {
        if (isDateOnly(isoDate)) {
            return "DATE("+super.getDateLiteral(isoDate)+")";
        } else if (isTimeOnly(isoDate)) {
            return "TIME("+super.getDateLiteral(isoDate)+")";
        } else {
            return "TIMESTAMP("+super.getDateLiteral(isoDate)+")";
        }
    }

    @Override
    protected void dropSequences(Connection conn) throws JDBCException {
    }
}
