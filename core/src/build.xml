<?xml version="1.0" encoding="UTF-8"?>

<!--
This is the main ant build script of Liquibase. It requires Ant 1.7.0+.

The available targets at the current stage:

 prepare:    creates the output folders, builds the classpath and
             sets some properties (reference to build.properties).
             Custom property values can be set through build.local.properties
             (not versioned)

 package:    builds the output artifacts (*.jar, *.zip, *.tar.gz). Both sources
             and binary artifacts are packaged, including jdk1.4 targeted ones

 compile:    compiles the sources (1.5 bytecode)

 clean:      cleans the output folders and all the previously generated artifacts

 site:       builds the project's site from static resources (*.html)

 javadoc:    project's javadocs (under build-reports/api)

 test:       executes the unit tests

 test-int:   executes the integration tests (requires a running accesible db runtime)

 all:        performs a complete build of the project
-->

<project name="liquibase" default="all">

    <property file="build.local.properties"/>
    <property file="build.properties"/>

    <!-- target: PREPARE -->
    <target name="prepare" description="Creation of the output folders, classpath">
        <property file="build.local.properties"/>
        <property file="build.properties"/>

        <tstamp>
            <format property="build.start" pattern="MM/DD/yyyy hh:mm aa"></format>
        </tstamp>

        <condition property="jvm.ok">
              <equals arg1="${ant.java.version}" arg2="${target.java.version}"/>
        </condition>

        <mkdir dir="${core.build.dir}"/>
        <mkdir dir="${core.build.test.dir}"/>
        <mkdir dir="${core.build.db.test.dir}"/>

        <mkdir dir="${jvm.build.dir}"/>
        <mkdir dir="${jvm.build.test.dir}"/>
        <mkdir dir="${jvm.build.db.test.dir}"/>

        <mkdir dir="${package.dir}/liquibase-${build.version}"/>
        <mkdir dir="${package.dir}/liquibase-${build.version}-src"/>
        <mkdir dir="${release.dir}"/>
        <mkdir dir="${release.site.dir}"/>
        <mkdir dir="${lib.deps.dir}"/>
        <mkdir dir="${reports.dir}"/>
        <mkdir dir="${reports.dir}/api"/>

        <!-- Build classpath -->
        <path id="core.classpath">
            <fileset dir="${core.lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${core.lib.compile.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <pathelement location="${core.build.dir}"/>
            <fileset dir="${release.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>

        <path id="jvm.classpath">
            <path refid="core.classpath"/>

            <fileset dir="${jvm.lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${jvm.lib.compile.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <pathelement location="${jvm.build.dir}"/>
        </path>

    </target>

    <target name="check-jvm" depends="prepare" unless="jvm.ok">
        <fail message="Wrong JVM - ${ant.java.version}"/>
      </target>

    <!-- target: CLEAN -->
    <target name="clean">
        <property file="build.properties"/>

        <delete dir="${core.build.dir}"/>
        <delete dir="${core.build.test.dir}"/>
        <delete dir="${core.build.db.test.dir}"/>

        <delete dir="${jvm.build.dir}"/>
        <delete dir="${jvm.build.test.dir}"/>
        <delete dir="${jvm.build.db.test.dir}"/>

        <delete dir="${release.dir}"/>
        <delete dir="${lib.deps.dir}"/>
        <delete dir="${reports.dir}"/>
        <delete dir="${package.dir}"/>
        <delete dir="${coverage.build.dir}"/>

        <delete dir="${maven.build.dir}"/>
    </target>

    <!-- target: COMPILE -->
    <target name="compile" depends="prepare, check-jvm">
        <copy todir="${core.build.dir}" filtering="true">
            <filterset>
                <filter token="BUILD.VERSION" value="${build.version}"/>
            </filterset>
            <fileset dir="${core.src.dir}/java"
                     includes="**/*.properties, **/*.xml, **/*.config, **/*.txt, **/*.jdo, **/*.tld, **/*.xsd, **/*.css, **/*.html"/>
        </copy>

        <copy todir="${core.build.dir}">
            <fileset dir="${core.src.dir}/java" includes="**/*.jpg, **/*.png, **/*.gif"/>
        </copy>
        <copy todir="${core.build.dir}">
            <fileset dir="${core.src.dir}/java" includes="**/help/**"/>
        </copy>
        <copy todir="${core.build.dir}/liquibase/">
            <fileset dir="${core.src.dir}" includes="buildinfo.properties"/>
        </copy>

        <javac srcdir="${core.src.dir}/java" destdir="${core.build.dir}" deprecation="${deprecation}" debug="${debug}"
               optimize="${optimize}" source="1.5">
            <classpath refid="core.classpath"/>
        </javac>

        <javac srcdir="${jvm.src.dir}/java" destdir="${jvm.build.dir}" deprecation="${deprecation}" debug="${debug}"
               optimize="${optimize}" source="1.5">
            <classpath refid="jvm.classpath"/>
        </javac>

        <mkdir dir="${core.build.test.dir}"/>
        <mkdir dir="${jvm.build.test.dir}"/>

        <javac srcdir="${core.src.dir}/java-test" destdir="${core.build.test.dir}" deprecation="${deprecation}"
               debug="${debug}" optimize="${optimize}" source="1.5">
            <classpath refid="core.classpath"/>
        </javac>
        <copy todir="${core.build.test.dir}">
            <fileset dir="${core.src.dir}/java-test"
                     includes="**/*.properties, **/*.xml, **/*.txt, **/*.config, **/*.tld, **/*.xsd,**/*.sql,**/*.css,**/*.html"/>
        </copy>

        <javac srcdir="${jvm.src.dir}/java-test" destdir="${jvm.build.test.dir}" deprecation="${deprecation}"
               debug="${debug}" optimize="${optimize}" source="1.5">
            <classpath refid="jvm.classpath"/>
        </javac>
        <copy todir="${jvm.build.test.dir}">
            <fileset dir="${jvm.src.dir}/java-test"
                     includes="**/*.properties, **/*.xml, **/*.txt, **/*.config, **/*.tld, **/*.xsd,**/*.sql,**/*.css,**/*.html"/>
        </copy>

        <javac srcdir="${core.src.dir}/java-dbtest" destdir="${core.build.db.test.dir}" deprecation="${deprecation}"
               debug="${debug}" optimize="${optimize}" source="1.5">
            <classpath>
                <pathelement path="${core.build.dir}"/>
                <pathelement path="${core.build.test.dir}"/>
                <path refid="core.classpath"/>
            </classpath>
        </javac>
        <javac srcdir="${jvm.src.dir}/java-dbtest" destdir="${jvm.build.db.test.dir}" deprecation="${deprecation}"
               debug="${debug}" optimize="${optimize}" source="1.5">
            <classpath>
                <pathelement path="${jvm.build.dir}"/>
                <pathelement path="${jvm.build.test.dir}"/>
                <path refid="jvm.classpath"/>
            </classpath>
        </javac>

        <propertyfile file="${core.build.dir}/buildinfo.properties">
            <entry key="build.version" value="${build.version}"/>
            <entry key="build.timestamp"
                   type="date"
                   pattern="yyyy-MM-dd'T'HH:mm:ss"
                   value="now"/>
        </propertyfile>
    </target>

    <macrodef name="build-sample-jars">
        <attribute name="sample"/>
        <sequential>
            <delete dir="${src.dir}/samples/ext/@{sample}/build"/>
            <mkdir dir="${src.dir}/samples/ext/@{sample}/build"/>
            <javac srcdir="${src.dir}/samples/ext/@{sample}/java" destdir="${src.dir}/samples/ext/@{sample}/build" deprecation="${deprecation}" debug="${debug}"
                   optimize="${optimize}" source="1.5">
                <classpath>
                    <pathelement path="${core.build.dir}"/>
                    <pathelement path="${core.build.test.dir}"/>
                    <path refid="core.classpath"/>
                </classpath>
            </javac>

            <jar basedir="${core.src.dir}/samples/ext/@{sample}/build" destfile="${src.dir}/../lib-test/liquibase-@{sample}.jar"/>
            </sequential>

        </macrodef>

    <target name="build-sample-jars" depends="prepare">
        <build-sample-jars sample="sample1"/>
        <build-sample-jars sample="sample2"/>
    </target>

    <!-- target: PACKAGE -->
    <target name="package" depends="compile">
        <jar destfile="${release.dir}/liquibase-core-SNAPSHOT.jar" manifest="${basedir}/../../core-jvm/src/java/META-INF/MANIFEST.MF">
            <zipfileset dir="${core.build.dir}"/>
        </jar>

        <jar destfile="${release.dir}/liquibase-SNAPSHOT.jar" manifest="${basedir}/../../core-jvm/src/java/META-INF/MANIFEST.MF">
            <zipfileset dir="${core.build.dir}"/>
            <zipfileset dir="${jvm.build.dir}"/>
        </jar>

        <copy tofile="${package.dir}/liquibase-${build.version}/liquibase-${build.version}.jar"
              file="${release.dir}/liquibase-SNAPSHOT.jar"/>
        <copy todir="${package.dir}/liquibase-${build.version}">
            <fileset file="${core.src.dir}/changelog.txt"/>
            <fileset file="${core.src.dir}/lgpl.txt"/>
            <fileset dir="${core.src.dir}/zip"/>
            <fileset dir="${release.dir}/.." includes="samples/**"/>
            <fileset dir="${release.site.dir}" includes="samples/**"/>
        </copy>
        <copy todir="${package.dir}/liquibase-${build.version}/docs">
            <fileset dir="${release.site.dir}"/>
        </copy>
        <chmod file="${package.dir}/liquibase-${build.version}/liquibase" perm="a+x"/>

        <zip destfile="${release.dir}/liquibase-${build.version}.zip" basedir="${package.dir}"
             includes="liquibase-${build.version}/**"/>
        <tar destfile="${release.dir}/liquibase-${build.version}.tar.gz" longfile="gnu" compression="gzip">
            <tarfileset dir="${package.dir}/liquibase-${build.version}" prefix="liquibase-${build.version}"
                        excludes="liquibase"/>
            <tarfileset dir="${package.dir}/liquibase-${build.version}" prefix="liquibase-${build.version}"
                        includes="liquibase" mode="755"/>
        </tar>

        <copy todir="${package.dir}/liquibase-${build.version}-src">
            <fileset dir="${package.dir}/liquibase-${build.version}">
                <exclude name="docs/**"/>
                <exclude name="samples/**"/>
            </fileset>
        </copy>
        <copy todir="${package.dir}/liquibase-${build.version}-src/src">
            <fileset dir="${core.src.dir}">
                <include name="java/**"/>
                <include name="java-test/**"/>
                <include name="build.xml"/>
                <include name="build.properties"/>
            </fileset>
            <fileset dir="${jvm.src.dir}">
                <include name="java/**"/>
                <include name="java-test/**"/>
                <include name="build.xml"/>
                <include name="build.properties"/>
            </fileset>
        </copy>
        <copy todir="${package.dir}/liquibase-${build.version}-src/lib">
            <fileset dir="${core.src.dir}/../lib"/>
            <fileset dir="${jvm.src.dir}/../lib"/>
        </copy>
        <copy todir="${package.dir}/liquibase-${build.version}-src/lib-compile">
            <fileset dir="${core.src.dir}/../lib-compile"/>
            <fileset dir="${jvm.src.dir}/../lib-compile"/>
        </copy>
        <chmod file="${package.dir}/liquibase-${build.version}-src/liquibase" perm="a+x"/>

        <zip destfile="${release.dir}/liquibase-${build.version}-src.zip" basedir="${package.dir}"
             includes="liquibase-${build.version}-src/**"/>
        <tar destfile="${release.dir}/liquibase-${build.version}-src.tar.gz" longfile="gnu" compression="gzip">
            <tarfileset dir="${package.dir}/liquibase-${build.version}-src" prefix="liquibase-${build.version}"
                        excludes="liquibase"/>
            <tarfileset dir="${package.dir}/liquibase-${build.version}-src" prefix="liquibase-${build.version}"
                        includes="liquibase" mode="755"/>
        </tar>
    </target>

    <!-- target: SITE -->
    <target name="site" depends="prepare">

        <copy todir="${release.site.dir}/xml/ns/dbchangelog">
            <fileset dir="${core.src.dir}/java/liquibase/">
                <include name="*.xsd"/>
            </fileset>
        </copy>
        <copy todir="${release.site.dir}/samples/">
            <fileset dir="${basedir}/../../core-jvm/src/samples"/>
        </copy>
        <copy todir="${release.site.dir}/api">
            <fileset dir="${reports.dir}/api"/>
        </copy>

        <zip destfile="${release.dir}/site-${build.version}.zip">
            <zipfileset dir="${release.site.dir}"/>
        </zip>

    </target>

    <!-- target: JAVADOC -->
    <target name="javadoc" depends="prepare">
        <javadoc
                destdir="${reports.dir}/api"
                author="true"
                version="true"
                use="true"
                windowtitle="LiquiBase ${build.version}) API"
                linksource="false"
                useexternalfile="yes"
                breakiterator="yes">

            <fileset dir="${core.src.dir}/java" defaultexcludes="yes">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${jvm.src.dir}/java" defaultexcludes="yes">
                <include name="**/*.java"/>
            </fileset>
            <classpath refid="core.classpath"/>
            <classpath refid="core.classpath"/>
            <!--<bottom><![CDATA[-->
            <!--<i>Copyright &#169; 2006-2009 Nathan Voxland. All Rights Reserved.</i>-->
            <!--<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">-->
            <!--</script>-->
            <!--<script type="text/javascript">-->
            <!--_uacct = "UA-1719178-1";-->
            <!--urchinTracker();-->
            <!--</script>-->
            <!--]]>-->
            <!--</bottom>-->
        </javadoc>
    </target>

    <!-- target: TEST -->
    <target name="test" depends="prepare, compile">
        <mkdir dir="${reports.dir}/junit/"/>
        <mkdir dir="${reports.dir}/junit/${ant.project.name}/"/>
        <junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="once" reloading="false"
               failureproperty="unit.tests.failed"
               jvm="${java.home}/bin/java">
            <env key="JAVA_HOME" path="${env.JAVA_HOME}"/>
            <classpath>
                <pathelement location="${coverage.build.dir}"/>
                <pathelement path="${core.build.dir}"/>
                <pathelement path="${jvm.build.dir}"/>
                <pathelement path="${core.build.test.dir}"/>
                <pathelement path="${jvm.build.test.dir}"/>
                <path refid="jvm.classpath"/>
            </classpath>
            <jvmarg value="-Demma.coverage.out.file=${coverage.output.dir}/coverage.emma"/>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <batchtest todir="${reports.dir}/junit/${ant.project.name}">
                <fileset dir="${core.build.test.dir}">
                    <include name="**/*Test.class"/>
                    <exclude name="**/Base*"/>
                    <exclude name="**/Abstract*"/>
                    <exclude name="liquibase/test/*"/>
                </fileset>
                <fileset dir="${jvm.build.test.dir}">
                    <include name="**/*Test.class"/>
                    <exclude name="**/Base*"/>
                    <exclude name="**/Abstract*"/>
                    <exclude name="liquibase/test/*"/>
                </fileset>
            </batchtest>
        </junit>

        <mkdir dir="${reports.dir}/junit-report/"/>
        <mkdir dir="${reports.dir}/junit-report/${ant.project.name}/"/>
        <junitreport todir="${reports.dir}/junit-report/${ant.project.name}">
            <fileset dir="${reports.dir}/junit/${ant.project.name}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}/junit-report/${ant.project.name}"/>
        </junitreport>
    </target>

    <!-- target: TEST-INT -->
    <target name="test-int" depends="prepare, compile">
        <!-- TODO: we could use a property to choose the target database to be testes on execution time -->
        <mkdir dir="${reports.dir}/junit/"/>
        <mkdir dir="${reports.dir}/junit/${ant.project.name}/"/>
        <junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="once" reloading="false"
               failureproperty="unit.tests.failed"
               jvm="${java.home}/bin/java">
            <env key="JAVA_HOME" path="${env.JAVA_HOME}"/>
            <classpath>
                <pathelement path="${core.build.dir}"/>
                <pathelement path="${core.build.test.dir}"/>
                <pathelement path="${core.build.db.test.dir}"/>
                <pathelement path="${jvm.build.dir}"/>
                <pathelement path="${jvm.build.test.dir}"/>
                <pathelement path="${jvm.build.db.test.dir}"/>
                <path refid="jvm.classpath"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${reports.dir}/junit/${ant.project.name}">
                <fileset dir="${core.build.db.test.dir}">
                    <include name="**/*Test.class"/>
                    <exclude name="**/Base*"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
                <fileset dir="${jvm.build.db.test.dir}">
                    <include name="**/*Test.class"/>
                    <exclude name="**/Base*"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
            </batchtest>
        </junit>

        <mkdir dir="${reports.dir}/junit-report/"/>
        <mkdir dir="${reports.dir}/junit-report/${ant.project.name}/"/>
        <junitreport todir="${reports.dir}/junit-report/${ant.project.name}">
            <fileset dir="${reports.dir}/junit/${ant.project.name}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}/junit-report/${ant.project.name}"/>
        </junitreport>
    </target>
    <!--
         Runs generic integration tests which do not require any database setup locally.
         These should be run before committing any changes to check to make sure liquibase as a whole is still running.
      -->
    <target name="test-int-generic" description="Integration tests that can be run on any computer without any setup"
            depends="prepare,compile">
        <mkdir dir="${reports.dir}/junit/"/>
        <mkdir dir="${reports.dir}/junit/${ant.project.name}/"/>
        <junit printsummary="yes" haltonfailure="yes" fork="yes" forkmode="once" reloading="false"
               failureproperty="unit.tests.failed"
               jvm="${java.home}/bin/java">
            <env key="JAVA_HOME" path="${env.JAVA_HOME}"/>
            <classpath>
                <pathelement path="${core.build.dir}"/>
                <pathelement path="${core.build.test.dir}"/>
                <pathelement path="${core.build.db.test.dir}"/>
                <pathelement path="${jvm.build.dir}"/>
                <pathelement path="${jvm.build.test.dir}"/>
                <pathelement path="${jvm.build.db.test.dir}"/>
                <path refid="jvm.classpath"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <batchtest todir="${reports.dir}/junit/${ant.project.name}">
                <fileset dir="${core.build.db.test.dir}">
                    <include name="**/DerbySampleChangeLogRunnerTest.class"/>
                    <include name="**/H2SampleChangeLogRunnerTest.class"/>
                    <include name="**/HsqlSampleChangeLogRunnerTest.class"/>
                </fileset>
                <fileset dir="${jvm.build.db.test.dir}">
                    <include name="**/DerbySampleChangeLogRunnerTest.class"/>
                    <include name="**/H2SampleChangeLogRunnerTest.class"/>
                    <include name="**/HsqlSampleChangeLogRunnerTest.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="-coverage-post-compile" depends="compile">
        <taskdef resource="emma_ant.properties">
            <classpath>
                <pathelement location="${core.lib.compile.dir}/emma.jar"/>
                <pathelement location="${core.lib.compile.dir}/emma_ant.jar"/>
            </classpath>
        </taskdef>
        <path id="build.path">
            <pathelement path="${core.build.dir}"/>
        </path>
        <emma enabled="true">
            <instr
                    instrpathref="build.path"
                    destdir="${coverage.build.dir}"
                    metadatafile="${coverage.output.dir}/metadata.emma"
                    merge="true"
                    />
        </emma>
    </target>

    <target name="code-coverage"
            depends="-coverage-post-compile,test" description="Generates code coverage reports for the unit tests">

        <emma enabled="true">
            <report sourcepath="${core.src.dir}/java">
                <fileset dir="${coverage.output.dir}">
                    <include name="*.emma"/>
                </fileset>

                <txt outfile="${reports.dir}/coverage-report/coverage.txt"/>
                <html outfile="${reports.dir}/coverage-report/coverage.html"/>
            </report>
        </emma>
    </target>

    <target name="continuous-build" description="Used by the continuous build server and runs the generic tests"
            depends="prepare,compile,test,test-int-generic">
        <fail if="unit.tests.failed"/>
    </target>

    <target name="maven" depends="prepare">
      <property environment="env"/>
        <echo>build version: ${build.version}</echo>

        <delete file="${basedir}/../pom.xml"/>
        <delete file="${maven.basedir}/pom.xml"/>

        <copy file="${basedir}/../pom.base.xml" tofile="${basedir}/../pom.xml" filtering="true">
            <filterset>
                <filter token="BUILD.VERSION" value="${build.version}"/>
                <filter token="MAVEN.BUILD.VERSION" value="${build.version}.${maven.build.version}"/>
            </filterset>
        </copy>
        <copy file="${maven.basedir}/pom.base.xml" tofile="${maven.basedir}/pom.xml" filtering="true">
            <filterset>
                <filter token="BUILD.VERSION" value="${build.version}"/>
                <filter token="MAVEN.BUILD.VERSION" value="${build.version}.${maven.build.version}"/>
            </filterset>
        </copy>

        <typedef resource="org/apache/maven/artifact/ant/antlib.xml">
            <classpath>
                <fileset dir="${lib.compile.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${maven.basedir}/lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </typedef>

        <pom id="core.maven.project" file="${basedir}/../pom.xml"/>
        <pom id="plugin.maven.project" file="${maven.basedir}/pom.xml"/>

        <deploy file="${package.dir}/liquibase-${build.version}/liquibase-${build.version}.jar">
            <remoteRepository url="file://${maven.repository}"/>
            <pom refid="core.maven.project"/>
        </deploy>

        <exec dir="${maven.basedir}" executable="cmd">
            <env key="JAVA_HOME" value="${env.JAVA_HOME}"/>
            <arg value="/c"/>
            <arg value="${env.M2_HOME}\bin\mvn.bat"/>
            <arg value="clean"/>
            <arg value="package"/>
            <arg value="plugin:xdoc"/>
            <arg value="site"/>
        </exec>

        <deploy file="${maven.basedir}/target/liquibase-plugin-${build.version}.${maven.build.version}.jar">
            <remoteRepository url="file://${maven.repository}"/>
            <pom refid="plugin.maven.project"/>
        </deploy>

        <!--TODO automate the coping the html files into the site... -->
        <copy todir="${release.site.dir}/phpincludes">
          <fileset dir="${maven.build.dir}/site">
            <include name="*-mojo.html"/>
          </fileset>
        </copy>
    </target>

    <target name="maven-snapshot" depends="prepare">
      <property environment="env"/>
        <echo>build version: ${build.version}</echo>

        <delete file="${basedir}/../pom.xml"/>
        <delete file="${maven.basedir}/pom.xml"/>

        <copy file="${basedir}/../pom.base.xml" tofile="${basedir}/../pom.xml" filtering="true">
            <filterset>
                <filter token="BUILD.VERSION" value="${build.version}-SNAPSHOT"/>
                <filter token="MAVEN.BUILD.VERSION" value="${build.version}.${maven.build.version}-SNAPSHOT"/>
            </filterset>
        </copy>
        <copy file="${maven.basedir}/pom.base.xml" tofile="${maven.basedir}/pom.xml" filtering="true">
            <filterset>
                <filter token="BUILD.VERSION" value="${build.version}-SNAPSHOT"/>
                <filter token="MAVEN.BUILD.VERSION" value="${build.version}.${maven.build.version}-SNAPSHOT"/>
            </filterset>
        </copy>

        <typedef resource="org/apache/maven/artifact/ant/antlib.xml">
            <classpath>
                <fileset dir="${lib.compile.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${maven.basedir}/lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </typedef>

        <pom id="core.maven.project" file="${basedir}/../pom.xml"/>
        <pom id="plugin.maven.project" file="${maven.basedir}/pom.xml"/>

        <deploy file="${release.dir}/liquibase-SNAPSHOT.jar">
            <remoteRepository url="file://${maven.repository.snapshot}"/>
            <pom refid="core.maven.project"/>
        </deploy>

        <exec dir="${maven.basedir}" executable="cmd">
            <env key="JAVA_HOME" value="${env.JAVA_HOME}"/>
            <arg value="/c"/>
            <arg value="${env.M2_HOME}\bin\mvn.bat"/>
            <arg value="clean"/>
            <arg value="package"/>
            <arg value="plugin:xdoc"/>
            <arg value="site"/>
        </exec>

        <deploy file="${maven.basedir}/target/liquibase-plugin-${build.version}.${maven.build.version}-SNAPSHOT.jar">
            <remoteRepository url="file://${maven.repository.snapshot}"/>
            <pom refid="plugin.maven.project"/>
        </deploy>

        <!--TODO automate the coping the html files into the site... -->
        <copy todir="${release.site.dir}/phpincludes">
          <fileset dir="${maven.build.dir}/site">
            <include name="*-mojo.html"/>
          </fileset>
        </copy>
    </target>


    <!-- target: ALL -->
    <target name="all" depends="prepare">
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="prepare" inheritAll="true" inheritRefs="true"/>
        <antcall target="compile" inheritAll="true" inheritRefs="true"/>
        <antcall target="javadoc" inheritAll="true" inheritRefs="true"/>
        <antcall target="site" inheritAll="true" inheritRefs="true"/>
        <antcall target="package" inheritAll="true" inheritRefs="true"/>
    </target>

    <target name="ikvmc" depends="package">
        <taskdef name="ikvmc" classname="net.ikvm.ant.IkvmcTask" classpathref="core.classpath"/>

        <property name="ikvm.home" location="c:/ikvm-0.40.0.1"/>

        <ikvmc target="library" out="${release.dir}/liquibase-core.dll" home="${ikvm.home}" version="0.0.0.1" debug="true" verbose="true" srcpath="${src.dir}/java">
             <fileset dir="${release.dir}">
                <include name="liquibase-core-SNAPSHOT.jar"/>
            </fileset>
        </ikvmc>
        <copy file="${release.dir}/liquibase-core.dll" tofile="${basedir}/../../core-clr/lib-deps/liquibase-core.dll" overwrite="true"/>


    </target>
</project>
