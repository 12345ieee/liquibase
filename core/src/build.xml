<?xml version="1.0" encoding="UTF-8"?>

<!--
This is the main ant build script of Liquibase. It requires Ant 1.7.0+.

The available targets at the current stage:

 prepare:    creates the output folders, builds the classpath and
             sets some properties (reference to build.properties).
             Custom property values can be set through build.local.properties
             (not versioned)

 retroweave: weaves the generated bytecode for jdk1.5 so Liquibase can be
             used on a jdk1.4 environment

 package:    builds the output artifacts (*.jar, *.zip, *.tar.gz). Both sources
             and binary artifacts are packaged, including jdk1.4 targeted ones

 compile:    compiles the sources (1.5 bytecode)

 clean:      cleans the output folders and all the previously generated artifacts

 site:       builds the project's site from static resources (*.html)

 javadoc:    project's javadocs (under build-reports/api)

 doxygen:    doxygen documentation (under build-reports/doxygen)

 test:       executes the unit tests

 test-int:   executes the integration tests (requires a running accesible db runtime)

 all:        performs a complete build of the project
-->

<project name="liquibase" default="all">

    <property file="build.local.properties"/>
    <property file="build.properties"/>

	<!-- target: PREPARE -->
    <target name="prepare" description="Creation of the output folders, classpath">
        <property file="build.local.properties"/>
        <property file="build.properties"/>

        <tstamp>
            <format property="build.start" pattern="MM/DD/yyyy hh:mm aa"></format>
        </tstamp>

        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.test.dir}"/>
        <mkdir dir="${build.db.test.dir}"/>
        <mkdir dir="${package.dir}/liquibase-${build.version}"/>
        <mkdir dir="${package.dir}/liquibase-${build.version}-src"/>
        <mkdir dir="${release.dir}"/>
        <mkdir dir="${release.site.dir}"/>
        <mkdir dir="${lib.deps.dir}"/>
        <mkdir dir="${reports.dir}"/>
        <mkdir dir="${reports.dir}/api"/>
        <mkdir dir="${reports.dir}/doxygen"/>

        <!-- Build classpath -->
        <path id="classpath">
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${lib.compile.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <pathelement location="${build.dir}"/>
            <pathelement path="${user.home}/.IntelliJIdea50/config/plugins/clover-idea5.jar"/>
            <fileset dir="${release.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>

        <!-- Task definitions -->
        <taskdef name="retroweaver" classname="net.sourceforge.retroweaver.ant.RetroWeaverTask">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${lib.compile.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${lib.14jvm.dir}">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
    	
    </target>

	<!-- target: CLEAN -->
    <target name="clean">
        <property file="build.properties"/>

        <delete dir="${build.dir}"/>
        <delete dir="${build.test.dir}"/>
        <delete dir="${build.db.test.dir}"/>
        <delete dir="${release.dir}"/>
        <delete dir="${lib.deps.dir}"/>
        <delete dir="${reports.dir}"/>
        <delete dir="${package.dir}"/>
    	<delete dir="${coverage.build.dir}"/>
    </target>

	<!-- target: COMPILE -->
    <target name="compile" depends="prepare">
        <copy todir="${build.dir}" filtering="true">
            <filterset>
                <filter token="BUILD.VERSION" value="${build.version}"/>
            </filterset>
            <fileset dir="${src.dir}/java"
                     includes="**/*.properties, **/*.xml, **/*.config, **/*.txt, **/*.jdo, **/*.tld, **/*.xsd, **/*.css"/>
        </copy>
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}/java" includes="**/*.jpg, **/*.png, **/*.gif"/>
        </copy>
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}/java" includes="**/help/**"/>
        </copy>
        <copy todir="${build.dir}/liquibase/">
            <fileset dir="${src.dir}" includes="buildinfo.properties"/>
        </copy>

        <javac srcdir="${src.dir}/java" destdir="${build.dir}" deprecation="${deprecation}" debug="${debug}"
               optimize="${optimize}" source="1.5">
            <classpath refid="classpath"/>
        </javac>

        <mkdir dir="${build.test.dir}"/>
        <javac srcdir="${src.dir}/java-test" destdir="${build.test.dir}" deprecation="${deprecation}"
               debug="${debug}" optimize="${optimize}" source="1.5">
            <classpath refid="classpath"/>
        </javac>
        <copy todir="${build.test.dir}">
            <fileset dir="${src.dir}/java-test"
                     includes="**/*.properties, **/*.xml, **/*.txt, **/*.config, **/*.tld, **/*.xsd,**/*.sql,**/*.css"/>
        </copy>

        <javac srcdir="${src.dir}/java-dbtest" destdir="${build.db.test.dir}" deprecation="${deprecation}"
               debug="${debug}" optimize="${optimize}" source="1.5">
            <classpath refid="classpath"/>
        </javac>

        <propertyfile file="${build.dir}/buildinfo.properties">
            <entry key="build.version" value="${build.version}"/>
            <entry key="build.timestamp"
                   type="date"
                   pattern="yyyy-MM-dd'T'HH:mm:ss"
                   value="now"/>
        </propertyfile>
    </target>

	<!-- target: RETROWEAVE -->
    <target name="retroweave" depends="prepare">
        <retroweaver srcdir="${build.dir}"/>
        <retroweaver srcdir="${build.test.dir}"/>
        <retroweaver srcdir="${build.db.test.dir}"/>
    </target>

	<!-- target: PACKAGE -->
    <target name="package" depends="compile">
        <jar destfile="${release.dir}/liquibase-SNAPSHOT.jar" basedir="${build.dir}"
             manifest="${src.dir}/../META-INF/MANIFEST.MF"/>

        <copy tofile="${package.dir}/liquibase-${build.version}/liquibase-${build.version}.jar" file="${release.dir}/liquibase-SNAPSHOT.jar"/>
        <copy todir="${package.dir}/liquibase-${build.version}">
            <fileset file="${src.dir}/changelog.txt"/>
            <fileset file="${src.dir}/lgpl.txt"/>
            <fileset dir="${src.dir}/zip"/>
            <fileset dir="${release.dir}/.." includes="samples/**"/>
            <fileset dir="${release.site.dir}" includes="samples/**"/>
        </copy>
        <copy todir="${package.dir}/liquibase-${build.version}/docs">
            <fileset dir="${release.site.dir}"/>
        </copy>
        <chmod file="${package.dir}/liquibase-${build.version}/liquibase" perm="a+x"/>

        <zip destfile="${release.dir}/liquibase-${build.version}.zip" basedir="${package.dir}" includes="liquibase-${build.version}/**"/>
        <tar destfile="${release.dir}/liquibase-${build.version}.tar.gz" longfile="gnu" compression="gzip">
            <tarfileset dir="${package.dir}/liquibase-${build.version}" prefix="liquibase-${build.version}" excludes="liquibase"/>
            <tarfileset dir="${package.dir}/liquibase-${build.version}" prefix="liquibase-${build.version}" includes="liquibase" mode="755"/>
        </tar>

        <copy todir="${package.dir}/liquibase-${build.version}-src">
            <fileset dir="${package.dir}/liquibase-${build.version}">
                <exclude name="docs/**"/>
                <exclude name="samples/**"/>
            </fileset>
        </copy>
        <copy todir="${package.dir}/liquibase-${build.version}-src/src">
            <fileset dir="${src.dir}">
                <include name="java/**"/>
                <include name="java-test/**"/>
                <include name="build.xml"/>
                <include name="build.properties"/>
            </fileset>
        </copy>
        <copy todir="${package.dir}/liquibase-${build.version}-src/lib">
            <fileset dir="${src.dir}/../lib"/>
        </copy>
        <copy todir="${package.dir}/liquibase-${build.version}-src/lib-compile">
            <fileset dir="${src.dir}/../lib-compile"/>
        </copy>
        <chmod file="${package.dir}/liquibase-${build.version}-src/liquibase" perm="a+x"/>

        <zip destfile="${release.dir}/liquibase-${build.version}-src.zip" basedir="${package.dir}" includes="liquibase-${build.version}-src/**"/>
        <tar destfile="${release.dir}/liquibase-${build.version}-src.tar.gz" longfile="gnu" compression="gzip">
            <tarfileset dir="${package.dir}/liquibase-${build.version}-src" prefix="liquibase-${build.version}" excludes="liquibase"/>
            <tarfileset dir="${package.dir}/liquibase-${build.version}-src" prefix="liquibase-${build.version}" includes="liquibase" mode="755"/>
        </tar>

        <retroweaver srcdir="${build.dir}"/>

        <jar destfile="${release.dir}/${ant.project.name}-SNAPSHOT-14jvm.jar"
             manifest="${src.dir}/../META-INF/MANIFEST.MF" index="true">
            <zipfileset dir="${build.dir}"/>
            <zipgroupfileset dir="${lib.14jvm.dir}" includes="retroweaver-rt-*.jar"/>
        </jar>

        <copy todir="${package.dir}/liquibase-${build.version}-14jvm">
            <fileset dir="${package.dir}/liquibase-${build.version}">
                <exclude name="liquibase-${build.version}.jar"/>
            </fileset>
            <fileset file="${release.dir}/${ant.project.name}-SNAPSHOT-14jvm.jar"/>
        </copy>
        <copy todir="${package.dir}/liquibase-${build.version}-14jvm/lib-14jvm">
            <fileset dir="${lib.14jvm.dir}"/>
        </copy>
        <chmod file="${package.dir}/liquibase-${build.version}-14jvm/liquibase" perm="a+x"/>

        <zip destfile="${release.dir}/liquibase-${build.version}-14jvm.zip" basedir="${package.dir}" includes="liquibase-${build.version}-14jvm/**"/>
        <tar destfile="${release.dir}/liquibase-${build.version}-14jvm.tar.gz" longfile="gnu" compression="gzip">
            <tarfileset dir="${package.dir}/liquibase-${build.version}-14jvm" prefix="liquibase-${build.version}" excludes="liquibase"/>
            <tarfileset dir="${package.dir}/liquibase-${build.version}-14jvm" prefix="liquibase-${build.version}" includes="liquibase" mode="755"/>
        </tar>
    </target>

	<!-- target: SITE -->
    <target name="site" depends="prepare">
        <loadfile property="nav.main" srcFile="${src.dir}/site/nav/main.html"/>
        <loadfile property="nav.manual" srcFile="${src.dir}/site/nav/manual.html"/>
        <loadfile property="nav.ide" srcFile="${src.dir}/site/nav/ide.html"/>
        <loadfile property="analytics" srcFile="${src.dir}/site/analytics.html"/>

        <copy todir="${release.site.dir}" filtering="true">
            <fileset dir="${src.dir}/site">
                <include name="**/*.html"/>
                <include name="**/*.htm"/>
            </fileset>
            <filterset>
                <filter token="NAV.MAIN" value="${nav.main}"/>
                <filter token="NAV.MANUAL" value="${nav.manual}"/>
                <filter token="NAV.IDE" value="${nav.ide}"/>
                <filter token="ANALYTICS" value="${analytics}"/>
                <filter token="BUILD.VERSION" value="${build.version}"/>
            </filterset>
        </copy>

        <copy todir="${release.site.dir}">
            <fileset dir="${src.dir}/site">
                <exclude name="**/*.html"/>
                <exclude name="**/*.wnk"/>
            </fileset>
        </copy>
        <copy todir="${release.site.dir}/xml/ns/dbchangelog">
            <fileset dir="${src.dir}/java/liquibase/">
                <include name="*.xsd"/>
            </fileset>
        </copy>
        <copy todir="${release.site.dir}/samples/">
            <fileset dir="${src.dir}/samples"/>
        </copy>
        <copy todir="${release.site.dir}/manual/latest/api">
            <fileset dir="${reports.dir}/api"/>
        </copy>
        <copy todir="${release.site.dir}/manual/latest/doxygen">
            <fileset dir="${reports.dir}/doxygen"/>
        </copy>

        <zip destfile="${release.dir}/site-${build.version}.zip">
            <zipfileset dir="${release.site.dir}"/>
        </zip>

    </target>

	<!-- target: JAVADOC -->
    <target name="javadoc" depends="prepare">
        <javadoc
                destdir="${reports.dir}/api"
                author="true"
                version="true"
                use="true"
                windowtitle="LiquiBASE API (${build.version})"
                linksource="false"
                useexternalfile="yes"
                breakiterator="yes">

            <fileset dir="${src.dir}/java" defaultexcludes="yes">
                <include name="**/*.java"/>
            </fileset>
            <classpath refid="classpath"/>
            <!--<bottom><![CDATA[-->
<!--<i>Copyright &#169; 2006-2007 Sundog. All Rights Reserved.</i>-->
<!--<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">-->
<!--</script>-->
<!--<script type="text/javascript">-->
<!--_uacct = "UA-1719178-1";-->
<!--urchinTracker();-->
<!--</script>-->
            <!--]]>-->
            <!--</bottom>-->
        </javadoc>
    </target>

	<!-- target: DOXYGEN -->
    <target name="doxygen" depends="prepare" if="run.doxygen">
        <taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${lib.compile.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${lib.14jvm.dir}">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <doxygen configfilename="${src.dir}/../Doxyfile" verbose="true">
            <property name="PROJECT_NUMBER" value="${build.version}" />
        </doxygen>
    </target>

	<!-- target: TEST -->
    <target name="test" depends="prepare, compile">
        <mkdir dir="${reports.dir}/junit/"/>
        <mkdir dir="${reports.dir}/junit/${ant.project.name}/"/>
        <junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="once" reloading="false"
               failureproperty="unit.tests.failed"
               jvm="${java.home}/bin/java">
            <env key="JAVA_HOME" path="${env.JAVA_HOME}"/>
            <classpath>
            	<pathelement location="${coverage.build.dir}"/>
                <pathelement path="${build.dir}"/>
                <pathelement path="${build.test.dir}"/>
                <path refid="classpath"/>
            </classpath>
        	<jvmarg value="-Demma.coverage.out.file=${coverage.output.dir}/coverage.emma"/>
            <formatter type="xml"/>
            <batchtest todir="${reports.dir}/junit/${ant.project.name}">
                <fileset dir="${build.test.dir}">
                    <include name="**/*Test.class"/>
                    <exclude name="**/Base*"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
            </batchtest>
        </junit>

        <mkdir dir="${reports.dir}/junit-report/"/>
        <mkdir dir="${reports.dir}/junit-report/${ant.project.name}/"/>
        <junitreport todir="${reports.dir}/junit-report/${ant.project.name}">
            <fileset dir="${reports.dir}/junit/${ant.project.name}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}/junit-report/${ant.project.name}"/>
        </junitreport>
    </target>

	<!-- target: TEST-INT -->
    <target name="test-int" depends="prepare, compile">
    		<!-- TODO: we could use a property to choose the target database to be testes on execution time -->
        <mkdir dir="${reports.dir}/junit/"/>
        <mkdir dir="${reports.dir}/junit/${ant.project.name}/"/>
        <junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="once" reloading="false"
               failureproperty="unit.tests.failed"
               jvm="${java.home}/bin/java">
            <env key="JAVA_HOME" path="${env.JAVA_HOME}"/>
            <classpath>
                <pathelement path="${build.dir}"/>
                <pathelement path="${build.test.dir}"/>
                <pathelement path="${build.db.test.dir}"/>
                <path refid="classpath"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${reports.dir}/junit/${ant.project.name}">
                <fileset dir="${build.db.test.dir}">
                    <include name="**/*Test.class"/>
                    <exclude name="**/Base*"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
            </batchtest>
        </junit>

        <mkdir dir="${reports.dir}/junit-report/"/>
        <mkdir dir="${reports.dir}/junit-report/${ant.project.name}/"/>
        <junitreport todir="${reports.dir}/junit-report/${ant.project.name}">
            <fileset dir="${reports.dir}/junit/${ant.project.name}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}/junit-report/${ant.project.name}"/>
        </junitreport>
    </target>
	<!--
		Runs generic integration tests which do not require any database setup locally.
		These should be run before committing any changes to check to make sure liquibase as a whole is still running.
	 -->
	<target name="test-int-generic" description="Integration tests that can be run on any computer without any setup" depends="prepare,compile">
		<mkdir dir="${reports.dir}/junit/"/>
		<mkdir dir="${reports.dir}/junit/${ant.project.name}/"/>
		<junit printsummary="yes" haltonfailure="yes" fork="yes" forkmode="once" reloading="false"
               failureproperty="unit.tests.failed"
               jvm="${java.home}/bin/java">
            <env key="JAVA_HOME" path="${env.JAVA_HOME}"/>
            <classpath>
                <pathelement path="${build.dir}"/>
                <pathelement path="${build.test.dir}"/>                
                <pathelement path="${build.db.test.dir}"/>
                <path refid="classpath"/>
            </classpath>
			<formatter type="brief" usefile="false" />
            <formatter type="xml"/>
            <batchtest todir="${reports.dir}/junit/${ant.project.name}">
                <fileset dir="${build.db.test.dir}">
                    <include name="**/DerbySampleChangeLogRunnerTest.class"/>
                	<include name="**/H2SampleChangeLogRunnerTest.class"/>
                    <include name="**/HsqlSampleChangeLogRunnerTest.class"/>
                </fileset>
            </batchtest>
        </junit>
	</target>
	
	<target name="-coverage-post-compile" depends="compile">
		<taskdef resource="emma_ant.properties">
			<classpath>
		    	<pathelement location="${lib.compile.dir}/emma.jar"/>
				<pathelement location="${lib.compile.dir}/emma_ant.jar"/>
			</classpath>
		</taskdef>
		<path id="build.path">
			<pathelement path="${build.dir}"/>
		</path>
		<emma enabled="true" >
			<instr 
				instrpathref="build.path"
				destdir="${coverage.build.dir}"	
				metadatafile="${coverage.output.dir}/metadata.emma"
				merge="true"
			/>
	    </emma>
	</target>
	
	<target name="code-coverage" 
		depends="-coverage-post-compile,test" description="Generates code coverage reports for the unit tests">
		
		<emma enabled="true" >
			<report sourcepath="${src.dir}" >
				<fileset dir="${coverage.output.dir}" >
					<include name="*.emma" />
				</fileset>
				
				<txt outfile="${reports.dir}/coverage-report/coverage.txt" />
				<html outfile="${reports.dir}/coverage-report/coverage.html" />
			</report>
		</emma>
	</target>
	
	<target name="continuous-build" description="Used by the continuous build server and runs the generic tests"
		depends="prepare,compile,test,test-int-generic"/>
	
	<!-- target: ALL -->
    <target name="all" depends="prepare">
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="prepare" inheritAll="true" inheritRefs="true"/>
        <antcall target="compile" inheritAll="true" inheritRefs="true"/>
        <antcall target="javadoc" inheritAll="true" inheritRefs="true"/>
        <antcall target="doxygen" inheritAll="true" inheritRefs="true"/>
        <antcall target="site" inheritAll="true" inheritRefs="true"/>
        <antcall target="package" inheritAll="true" inheritRefs="true"/>
    </target>
</project>
