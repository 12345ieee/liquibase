pipeline {
    options { 
        timestamps() 
    }
    agent {
        node {
            label 'dockerBuilder'
        }
    }
    environment {
        GITHUB_AUTH = credentials('github-auth')
        ART_AUTH = credentials('artifactory-auth')
        DOCKER_AUTH = credentials('docker-auth')
        NUM_BRANCH_NAME = sh(
            script: "echo ${BRANCH_NAME} | tr -dc '0-9'",
            returnStdout: true
        ).trim()
        APPVERSION_PREFIX = 4.36
        // Env var examples using properties file
        // buildPropertiesString = readFile file: 'target/classes/datical.build.properties'
        // buildProperties = new java.util.Properties()
        // buildProperties.load(new java.io.StringReader(buildPropertiesString))
        // version = buildProperties['build.version']
        // artifactId = buildProperties['build.artifact.id']
        // branch = buildProperties['build.git.branch']
        // dockerTag = branch.replaceFirst(/^master$/, 'latest')
		//BUNDLE_HAS_BRANCH = sshagent (credentials: ['github-auth']) {
		//	sh(
		//		script:  "git ls-remote --heads git@github.com:Datical/liquibase-bundle.git ${GIT_BRANCH} | wc -l",
		//		returnStdout: true
		//		).trim()
		//}
    }
    stages {
        stage('Checkout Repos') {
            steps {			
				sh 'mkdir liquibase || true'
				sh 'mv .[!.]* liquibase || true'
				sh 'mv * liquibase || true'
				sshagent (credentials: ['ba0e0f7c-180a-48c2-a313-9cab17d0188f']) {
                    script {
                        env.CLI_COMMON_BRANCH_NAME = sh (script: "if [ \$(git ls-remote --heads git@github.com:Datical/CLI-Common.git ${BRANCH_NAME} | wc -l) -eq 1 ]; then echo ${BRANCH_NAME}; else echo master; fi", returnStdout: true)
                        env.LB_BUNDLE_BRANCH_NAME = sh (script: "if [ \$(git ls-remote --heads git@github.com:Datical/liquibase-bundle.git ${BRANCH_NAME} | wc -l) -eq 1 ]; then echo ${BRANCH_NAME}; else echo master; fi", returnStdout: true)
                        env.LB_TESTS_BRANCH_NAME = sh (script: "if [ \$(git ls-remote --heads git@github.com:Datical/Liquibase-CLI-testing.git ${BRANCH_NAME} | wc -l) -eq 1 ]; then echo ${BRANCH_NAME}; else echo master; fi", returnStdout: true)
                    }
				}
				dir('liquibase-bundle') {
					checkout ([$class: 'GitSCM', branches: [[name: "*/master"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: "master"]], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'ba0e0f7c-180a-48c2-a313-9cab17d0188f', url: "git@github.com:Datical/liquibase-bundle.git"]]])
				}
			}
		}
        stage('Compile Liquibase') {
            steps {
                script {
                    docker.withRegistry('https://docker-dev.artifactory.datical.net', 'docker-auth') {
                        maven = docker.image("development/docker-test-cucumber")
                        maven.pull()
                        maven.inside {
                            // Liquibase Core Compile
							sh 'pwd'
							sh 'ls ..'
							sh 'ls'
							sh 'ls liquibase-bundle@tmp'
							sh '''
							    cd liquibase
							    pwd
								git status
							   '''
							sh 'env'
                            // sh 'mvn -U -DskipTests clean install -f pom.xml'
                        }
                    }
                    // archiveArtifacts artifacts: '**/repl/target/*.jar'   
                    // stash name: 'liquibase-core-target'
                }
            }
        }
    }
    post {
        always {
            echo 'Jenkinsfile Build Complete'
        }
    }
}

